/*     */ package xyz.pixelatedw.mineminenomi.abilities;
/*     */ 
/*     */ import java.io.Serializable;
/*     */ import java.lang.invoke.SerializedLambda;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import net.minecraft.entity.Entity;
/*     */ import net.minecraft.entity.LivingEntity;
/*     */ import net.minecraft.item.ItemStack;
/*     */ import net.minecraft.particles.ParticleType;
/*     */ import net.minecraft.util.DamageSource;
/*     */ import xyz.pixelatedw.mineminenomi.api.abilities.DamagedPassiveAbility;
/*     */ import xyz.pixelatedw.mineminenomi.api.helpers.DevilFruitHelper;
/*     */ import xyz.pixelatedw.mineminenomi.api.helpers.HakiHelper;
/*     */ import xyz.pixelatedw.mineminenomi.api.helpers.ItemsHelper;
/*     */ import xyz.pixelatedw.mineminenomi.api.helpers.abilities.AbilityHelper;
/*     */ import xyz.pixelatedw.mineminenomi.config.CommonConfig;
/*     */ import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.DevilFruitCapability;
/*     */ import xyz.pixelatedw.mineminenomi.data.entity.entitystats.EntityStatsCapability;
/*     */ import xyz.pixelatedw.mineminenomi.init.ModDamageSource;
/*     */ import xyz.pixelatedw.mineminenomi.init.ModEffects;
/*     */ import xyz.pixelatedw.mineminenomi.particles.data.GenericParticleData;
/*     */ import xyz.pixelatedw.mineminenomi.particles.effects.common.LogiaParticleEffect;
/*     */ import xyz.pixelatedw.mineminenomi.wypi.APIConfig;
/*     */ import xyz.pixelatedw.mineminenomi.wypi.abilities.Ability;
/*     */ import xyz.pixelatedw.mineminenomi.wypi.abilities.IChangeDamageSourceAbility;
/*     */ import xyz.pixelatedw.mineminenomi.wypi.abilities.projectiles.AbilityProjectileEntity;
/*     */ import xyz.pixelatedw.mineminenomi.wypi.data.ability.AbilityDataCapability;
/*     */ 
/*     */ public class LogiaInvulnerabilityAbility
/*     */   extends DamagedPassiveAbility
/*     */ {
/*     */   private final ParticleType<GenericParticleData> particle;
/*     */   protected ILogiaEffect onSpecificLogiaEffect = (target, attacker) -> true;
/*     */   private final DamageSource[] newSources;
/*     */   private final String name;
/*     */   public LogiaParticleEffect particleEffect;
/*  38 */   public ArrayList<DamageSource> immunitySources = new ArrayList<>(Arrays.asList(new DamageSource[] { DamageSource.CACTUS, DamageSource.SWEET_BERRY_BUSH, DamageSource.ANVIL, DamageSource.FLY_INTO_WALL, DamageSource.FALL, DamageSource.FALLING_BLOCK, DamageSource.FIREWORKS }));
/*  39 */   private ArrayList<String> acceptableInstantSources = new ArrayList<>(Arrays.asList(new String[] { "mob", "player" }));
/*  40 */   private LogiaParticleEffect fireLogiaParticleEffect = null;
/*     */ 
/*     */   
/*     */   public LogiaInvulnerabilityAbility(ParticleType<GenericParticleData> particle, String name, ILogiaEffect effect, DamageSource... sources) {
/*  44 */     super("Logia Invulnerability " + name, AbilityHelper.getDevilFruitCategory());
/*  45 */     setDescription("Allows the user to avoid attacks by instinctively transforming parts of their body into their specific element");
/*  46 */     this.particle = particle;
/*  47 */     this.name = name;
/*  48 */     this.newSources = sources;
/*  49 */     this.immunitySources.addAll(Arrays.asList(this.newSources));
/*  50 */     this.onDamagedEvent = this::onDamagedEvent;
/*  51 */     if (effect != null)
/*  52 */       this.onSpecificLogiaEffect = effect; 
/*  53 */     this.particleEffect = new LogiaParticleEffect(this.particle);
/*  54 */     hideInGUI(false);
/*  55 */     setDisplayName("Logia Invulnerability");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean onDamagedEvent(LivingEntity entity, DamageSource damageSource) {
/*  61 */     if (!((Boolean)CommonConfig.INSTANCE.logiaInvulnerability.get()).booleanValue() || 
/*  62 */       !DevilFruitCapability.get(entity).isLogia() || entity
/*  63 */       .isPotionActive(ModEffects.ABILITY_OFF) || 
/*  64 */       DevilFruitHelper.kairosekiChecks(entity) || (damageSource instanceof ModDamageSource && ((ModDamageSource)damageSource)
/*  65 */       .isDamageBypassingLogiaInvulnerability()))
/*     */     {
/*     */       
/*  68 */       return true;
/*     */     }
/*     */ 
/*     */     
/*  72 */     boolean hasShadow = EntityStatsCapability.get(entity).hasShadow();
/*  73 */     if (this.immunitySources.contains(DamageSource.ON_FIRE) && damageSource == DamageSource.ON_FIRE && !hasShadow) {
/*  74 */       return true;
/*     */     }
/*  76 */     if (damageSource.isExplosion()) {
/*     */       
/*  78 */       spawnParticles((Entity)entity, false);
/*  79 */       return false;
/*     */     } 
/*     */     
/*  82 */     boolean result = true;
/*  83 */     Entity trueSource = damageSource.getTrueSource();
/*  84 */     Entity instantSource = damageSource.getImmediateSource();
/*     */     
/*  86 */     if (instantSource instanceof LivingEntity && this.acceptableInstantSources.contains(damageSource.getDamageType())) {
/*     */       
/*  88 */       result = false;
/*     */       
/*  90 */       boolean isUsingChangeDamageSource = Arrays.<Ability>stream(AbilityDataCapability.get((LivingEntity)instantSource).getEquippedAbilities(APIConfig.AbilityCategory.ALL)).anyMatch(ability -> (ability instanceof IChangeDamageSourceAbility && ((IChangeDamageSourceAbility)ability).isSourceChangeEnabled()));
/*     */       
/*  92 */       if (!isUsingChangeDamageSource) {
/*     */         
/*  94 */         result = this.onSpecificLogiaEffect.attackerEffect(entity, (LivingEntity)instantSource);
/*     */         
/*  96 */         ItemStack heldItem = ((LivingEntity)instantSource).getHeldItemMainhand();
/*     */         
/*  98 */         boolean hasHardeningHaki = (heldItem.isEmpty() && HakiHelper.hasHardeningActive((LivingEntity)instantSource));
/*  99 */         boolean hasImbuingHaki = (!heldItem.isEmpty() && HakiHelper.hasImbuingActive((LivingEntity)instantSource));
/* 100 */         boolean hasKairosekiWeapon = ItemsHelper.isKairosekiWeapon(heldItem);
/*     */         
/* 102 */         boolean bypassInvulnerability = (hasHardeningHaki || hasImbuingHaki || hasKairosekiWeapon);
/*     */         
/* 104 */         if (bypassInvulnerability) {
/* 105 */           return true;
/*     */         }
/*     */       } 
/*     */     } 
/* 109 */     if (damageSource.isProjectile()) {
/*     */       
/* 111 */       result = instantSource instanceof xyz.pixelatedw.mineminenomi.entities.projectiles.extra.KairosekiBulletProjectile;
/*     */       
/* 113 */       if (instantSource instanceof AbilityProjectileEntity && trueSource instanceof LivingEntity)
/*     */       {
/* 115 */         if (CommonConfig.INSTANCE.doLogiasHaveHurtHakiLogic()) {
/*     */           
/* 117 */           AbilityProjectileEntity projectileEntity = (AbilityProjectileEntity)instantSource;
/* 118 */           if (projectileEntity.isPhysical()) {
/*     */             
/* 120 */             if (projectileEntity.isAffectedByHardening() && HakiHelper.hasHardeningActive((LivingEntity)trueSource)) {
/* 121 */               result = true;
/* 122 */             } else if (projectileEntity.isAffectedByImbuing() && HakiHelper.hasImbuingActive((LivingEntity)trueSource)) {
/* 123 */               result = true;
/*     */             } 
/*     */           } else {
/* 126 */             result = CommonConfig.INSTANCE.doLogiasHaveHurtExtendedLogic();
/*     */           } 
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 132 */     if (this.immunitySources.stream().anyMatch(s -> damageSource.getDamageType().equals(s.getDamageType()))) {
/* 133 */       result = false;
/*     */     }
/*     */     
/* 136 */     boolean fireResistance = (this.immunitySources.stream().anyMatch(s -> s.getDamageType().equals("inFire")) && (damageSource.getDamageType().equals("inFire") || damageSource.getDamageType().equals("onFire")));
/* 137 */     boolean magmaImmunity = (this.immunitySources.stream().anyMatch(s -> s.getDamageType().equals("lava")) && damageSource.isFireDamage());
/*     */     
/* 139 */     boolean spawnFireParticles = false;
/* 140 */     if (fireResistance || magmaImmunity) {
/*     */       
/* 142 */       entity.extinguish();
/*     */       
/* 144 */       if (result && CommonConfig.INSTANCE.doLogiasHaveHurtExtendedLogic() && instantSource instanceof AbilityProjectileEntity) {
/* 145 */         return true;
/*     */       }
/* 147 */       spawnFireParticles = true;
/* 148 */       result = false;
/*     */     } 
/*     */     
/* 151 */     if (!result) {
/* 152 */       spawnParticles((Entity)entity, spawnFireParticles);
/*     */     }
/* 154 */     return result;
/*     */   }
/*     */ 
/*     */   
/*     */   public void spawnParticles(Entity entity, boolean isFire) {
/* 159 */     if (isFire) {
/*     */       
/* 161 */       if (this.fireLogiaParticleEffect == null)
/* 162 */         this.fireLogiaParticleEffect = new LogiaParticleEffect(this.particle); 
/* 163 */       this.fireLogiaParticleEffect.ownerID = entity.getEntityId();
/* 164 */       this.fireLogiaParticleEffect.hideTooClose = true;
/* 165 */       this.fireLogiaParticleEffect.spawn(entity.world, entity.getPosX(), entity.getPosY(), entity.getPosZ(), 0.0D, 0.0D, 0.0D);
/*     */     }
/*     */     else {
/*     */       
/* 169 */       this.particleEffect.spawn(entity.world, entity.getPosX(), entity.getPosY(), entity.getPosZ(), 0.0D, 0.0D, 0.0D);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Ability create() {
/*     */     try {
/* 178 */       return getClass().getConstructor(new Class[] { ParticleType.class, String.class, ILogiaEffect.class, DamageSource[].class }).newInstance(new Object[] { this.particle, this.name, this.onSpecificLogiaEffect, this.newSources });
/*     */     }
/* 180 */     catch (Exception ex) {
/*     */       
/* 182 */       ex.printStackTrace();
/*     */       
/* 184 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   public static interface ILogiaEffect extends Serializable {
/*     */     boolean attackerEffect(LivingEntity param1LivingEntity1, LivingEntity param1LivingEntity2);
/*     */   }
/*     */ }


/* Location:              C:\Users\4tuto\curseforge\minecraft\Instances\incontrol\mods\mine-mine-no-mi-1.15.2-0.8.1.jar!\xyz\pixelatedw\mineminenomi\abilities\LogiaInvulnerabilityAbility.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */